#!/usr/bin/env perl

#######################################################################################################################
# AUTHOR: Naveed Ishaque
# DATE: 23rd Nov 2016
# EMAIL: naveed.ishaque@gmail.com

# Made fore HIPO2 RNAseq workfow
# Takes 3 feature counts files (run with -s 0, -s 1, -s 2), a GTF file, and GTF ignore list
# Report a unified read count, FPKM and TPM file

#######################################################################################################################

## 0 : LOAD LIBRARIES

use strict;
use List::Util 'sum';

use gtfParser;

my $MILLION =    1000000;
my $BILLION = 1000000000;

my $usage = "\n\tUSAGE: $0 [featureCounts_file_s0] [featureCounts_file_s1] [featureCounts_file_s2] [GTF_file] [ignore_GTF_file]\n\n";

#######################################################################################################################

## 1 : READ IN FEATURE_COUNT FILES OR DIE

warn "STARTING PROCESS : 1 : parsing inputs\n";

my $fc0_file = shift or die "-------- PROCESS : 1 : parsing inputs : ERROR : missing first featureCounts file!\n$usage";
my $fc1_file = shift or die "-------- PROCESS : 1 : parsing inputs : ERROR : missing second featureCounts file!\n$usage";
my $fc2_file = shift or die "-------- PROCESS : 1 : parsing inputs : ERROR : missing third featureCounts file!\n$usage";

my %files = ();
$files{0}="$fc0_file";
$files{1}="$fc1_file";
$files{2}="$fc2_file";

my $gtf_file = shift or die "-------- PROCESS : 1 : parsing inputs : ERROR : missing full GTF file!\n$usage";

my $ignore_gtf_file = shift or die "-------- PROCESS : 1 : parsing inputs : ERROR : missing ignore GTF file!\n$usage";

warn "PROCESS COMPLETE : 1 : parsing inputs\n";

#######################################################################################################################

## 2 : FILE CHECK OR DIE

warn "STARTING PROCESS : 2 : file checks\n";

open (my $fc0_fh, "<$fc0_file") or die "-------- PROCESS : 2 : file checks : ERROR : cannot open first featureCounts file \"$fc0_file\"\n$usage";
open (my $fc1_fh, "<$fc1_file") or die "-------- PROCESS : 2 : file checks : ERROR : cannot open second featureCounts file \"$fc1_file\"\n$usage";
open (my $fc2_fh, "<$fc2_file") or die "-------- PROCESS : 2 : file checks : ERROR : cannot open third featureCounts file \"$fc2_file\"\n$usage";

my $gtf_fh;
my $ignore_gtf_fh;

if (length $gtf_file > 0){
  open ($gtf_fh, "<$gtf_file ") or die "-------- PROCESS : 2 : file checks : ERROR : cannot open GTF file file \"$gtf_file\"\n$usage";
}

if (length $ignore_gtf_file > 0){
  open ($ignore_gtf_fh, "<$ignore_gtf_file") or die "-------- PROCESS : 2 : file checks : ERROR : cannot open ignore GTF file file \"$ignore_gtf_file\"\n$usage";
}

warn "PROCESS COMPLETE : 2 : file checks\n";

#######################################################################################################################

## 3 : PARSE GTF

my %gtf = ();
my $gtf_count = 0;

if (length $gtf_file > 0) {
  warn "STARTING PROCESS : 3 : parse GTF file : $gtf_file\n";

  # Parsing the GTF file using an import function
  my $return_names = 0;
  my ($gtf_ref, $gtf_count_ref) = gtfParser::parseGTFFile($gtf_fh, $return_names);
  # Dereference
  %gtf = %{$gtf_ref};
  $gtf_count = ${$gtf_count_ref};

  warn "-------- PROCESS : 3 : parse GTF file : $gtf_file : gene counts : $gtf_count\n";
  close($gtf_fh);
  warn "PROCESS COMPLETE : 3 : parse GTF file\n";
 
}

#######################################################################################################################

## 4 : PARSE IGNORE

my %ignore = ();
my $ignore_count = 0;

if (length $ignore_gtf_file > 0) {
  warn "STARTING PROCESS : 4 : parse ignore GTF file\n";

  # Parsing the GTF file using an import function
  my $return_names = 0;
  my ($ignore_ref, $ignore_count_ref) = gtfParser::parseGTFFile($ignore_gtf_fh, $return_names);
  # Dereference
  %ignore = %{$ignore_ref};
  $ignore_count = ${$ignore_count_ref};

  warn "-------- PROCESS : 3 : parse ignore GTF file : $ignore_gtf_file : gene counts : $ignore_count\n";
  close($ignore_gtf_fh);
  warn "PROCESS COMPLETE : 4 : parse ignore GTF file\n";

}

#######################################################################################################################

## 5 : READ FILES INTO HASH

warn "STARTING PROCESS : 5 : reading files\n";

# each file has the structure: ENSG_ID chrs start_pos end_pos strand exonic_length exonic_counts

my $hash_index = 0;
my %read_counts = ();
my %read_counts_per_length = ();
my %read_counts_all = ();
my %read_counts_all_per_length = ();

my %gene_lengths;
my $counter;

foreach my $fc_fh ($fc0_fh, $fc1_fh, $fc2_fh){
  $counter = 0;

  warn "-------- PROCESS : 5 : reading files : $files{$hash_index}\n";

  while (!eof($fc_fh)){

    my $line = readline($fc_fh) || die "Error reading from '$files{$hash_index}': $!";
    chomp ($line);
    
    # To skip the first two lines
    if($line =~ /^#/ || $line =~ /^Geneid/){
      next;
    }

    my ($id,$chr,$start,$end,$strand,$length,$counts) = split /\t/, $line;   

    $read_counts{$hash_index}{$id}                = $counts         unless (exists $ignore{$id});
    $read_counts_per_length{$hash_index}{$id}     = $counts/$length unless (exists $ignore{$id});

    $read_counts_all{$hash_index}{$id}            = $counts;
    $read_counts_all_per_length{$hash_index}{$id} = $counts/$length;

    $gene_lengths{$id} = $length if ($hash_index < 1);
    $counter++;
  }
  warn "-------- PROCESS : 5 : reading files : $files{$hash_index} : gene count : $counter\n";
  warn "-------- PROCESS : 5 : reading files : $files{$hash_index} : gene count : WARNING : gene count featureCounts file ($counter) not equal to GTF gene count ($gtf_count)\n" if (($counter ne $gtf_count) && ($gtf_count > 0));
  $hash_index++;
}

close ($fc0_fh);
close ($fc1_fh);
close ($fc2_fh);

warn "PROCESS COMPLETE : 5 : reading files\n";

#######################################################################################################################

## 6 : CALCULATE FPKM DIVISOR

warn "STARTING PROCESS : 6 : calculating total reads counts\n";

my %all_read_counts = ();
my %ignore_read_counts = ();

$all_read_counts{0} = sum values %{$read_counts_all{0}};
$all_read_counts{1} = sum values %{$read_counts_all{1}};
$all_read_counts{2} = sum values %{$read_counts_all{2}};
$ignore_read_counts{0} = sum values %{$read_counts{0}};
$ignore_read_counts{1} = sum values %{$read_counts{1}};
$ignore_read_counts{2} = sum values %{$read_counts{2}};

warn "-------- PROCESS : 6 : calculating total reads counts/FPKMs : $fc0_file : total reads : all : $all_read_counts{0}\n";
warn "-------- PROCESS : 6 : calculating total reads counts/FPKMs : $fc1_file : total reads : all : $all_read_counts{1}\n";
warn "-------- PROCESS : 6 : calculating total reads counts/FPKMs : $fc2_file : total reads : all : $all_read_counts{2}\n";

if (length $ignore_gtf_file > 0){
  warn "-------- PROCESS : 6 : calculating total reads counts/FPKMs : $fc0_file : total reads : ignore : $ignore_read_counts{0}\n";
  warn "-------- PROCESS : 6 : calculating total reads counts/FPKMs : $fc1_file : total reads : ignore : $ignore_read_counts{1}\n";
  warn "-------- PROCESS : 6 : calculating total reads counts/FPKMs : $fc2_file : total reads : ignore : $ignore_read_counts{2}\n";
}

warn "PROCESS COMPLETE : 6 : calculating total reads counts\n";

#######################################################################################################################

## 7 : CALCULATE TPM DIVISOR

warn "STARTING PROCESS : 7 : calculating total reads FPKMs\n";

my %all_fpkm_counts = ();   
my %ignore_fpkm_counts = ();

$all_fpkm_counts{0}    = (sum values %{$read_counts_all_per_length{0}}) * ($BILLION/$all_read_counts{0});
$all_fpkm_counts{1}    = (sum values %{$read_counts_all_per_length{1}}) * ($BILLION/$all_read_counts{1});
$all_fpkm_counts{2}    = (sum values %{$read_counts_all_per_length{2}}) * ($BILLION/$all_read_counts{2});
$ignore_fpkm_counts{0} = (sum values %{$read_counts_per_length{0}})     * ($BILLION/$ignore_read_counts{0});
$ignore_fpkm_counts{1} = (sum values %{$read_counts_per_length{1}})     * ($BILLION/$ignore_read_counts{1});
$ignore_fpkm_counts{2} = (sum values %{$read_counts_per_length{2}})     * ($BILLION/$ignore_read_counts{2});

warn "-------- PROCESS : 7 : calculating total reads FPKMs : $fc0_file : total fpkms : all : $all_fpkm_counts{0}\n";
warn "-------- PROCESS : 7 : calculating total reads FPKMs : $fc1_file : total fpkms : all : $all_fpkm_counts{1}\n";
warn "-------- PROCESS : 7 : calculating total reads FPKMs : $fc2_file : total fpkms : all : $all_fpkm_counts{2}\n";

if (length $ignore_gtf_file > 0){
  warn "-------- PROCESS : 7 : calculating total reads FPKMs : $fc0_file : total fpkms : ignore : $ignore_fpkm_counts{0}\n";
  warn "-------- PROCESS : 7 : calculating total reads FPKMs : $fc1_file : total fpkms : ignore : $ignore_fpkm_counts{1}\n";
  warn "-------- PROCESS : 7 : calculating total reads FPKMs : $fc2_file : total fpkms : ignore : $ignore_fpkm_counts{2}\n";
}

warn "PROCESS COMPLETE : 7 : calculating total reads FPKMs\n";

#######################################################################################################################

## 8 : PRINT

warn "STARTING PROCESS : 8 : printing\n";

# open an original file to maintain order

open (my $fh, "cut -f 1 $fc0_file| tail -n $counter |") or die;

# print header
print "\#chrom\tchromStart\tchromEnd\tgene_id\tscore\tstrand\tname\texonic_length\t";
print "num_reads\tnum_reads_fw\tnum_reads_rv\t";
print "FPKM\tFPKM_fw\tFPKM_rv\t";
print "TPM\tTPM_fw\tTPM_rv\t";
print "FPKM_standard\tFPKM_standard_fw\tFPKM_standard_rv\t";
print "TPM_standard\tTPM_standard_fw\tTPM_standard_rv\n";

while (!eof($fh)){

  my $fc0 = readline($fh) || die "Error reading from '$fc0_file': $!";
  chomp $fc0;

  # print gene ID or BED
  print "$fc0\t"       unless (length $gtf_file > 0);
  print "$gtf{$fc0}\t" if     (length $gtf_file > 0);
  print "$gene_lengths{$fc0}\t";
  
  # print read counts
  print "$read_counts_all{0}{$fc0}\t";
  print "$read_counts_all{1}{$fc0}\t";
  print "$read_counts_all{2}{$fc0}\t";

    # print RPKMS exclude
    print "".($read_counts_all_per_length{0}{$fc0})*($BILLION/$ignore_read_counts{0})."\t";
    print "".($read_counts_all_per_length{1}{$fc0})*($BILLION/$ignore_read_counts{1})."\t";
    print "".($read_counts_all_per_length{2}{$fc0})*($BILLION/$ignore_read_counts{2})."\t";

    # print TPMS exclude
    print "".($read_counts_all_per_length{0}{$fc0})*($BILLION/$ignore_read_counts{0})/($ignore_fpkm_counts{0}/$MILLION)."\t";
    print "".($read_counts_all_per_length{1}{$fc0})*($BILLION/$ignore_read_counts{1})/($ignore_fpkm_counts{1}/$MILLION)."\t";
    print "".($read_counts_all_per_length{2}{$fc0})*($BILLION/$ignore_read_counts{2})/($ignore_fpkm_counts{2}/$MILLION)."\t";

  # print RPKMS standard
  print "".($read_counts_all_per_length{0}{$fc0})*($BILLION/$all_read_counts{0})."\t";
  print "".($read_counts_all_per_length{1}{$fc0})*($BILLION/$all_read_counts{1})."\t";
  print "".($read_counts_all_per_length{2}{$fc0})*($BILLION/$all_read_counts{2})."\t";

  # print TPMS standard
  print "".($read_counts_all_per_length{0}{$fc0})*($BILLION/$all_read_counts{0})/($all_fpkm_counts{0}/$MILLION)."\t";
  print "".($read_counts_all_per_length{1}{$fc0})*($BILLION/$all_read_counts{1})/($all_fpkm_counts{1}/$MILLION)."\t";
  print "".($read_counts_all_per_length{2}{$fc0})*($BILLION/$all_read_counts{2})/($all_fpkm_counts{2}/$MILLION)."";

  print "\n";

}

close ($fh);

warn "PROCESS COMPLETE : 8 : printing\n";

#######################################################################################################################

warn "DONE!\n";

exit(0);



