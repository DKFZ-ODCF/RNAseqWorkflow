#!/usr/bin/env perl
#
# Copyright (c) 2018 German Cancer Research Center (DKFZ).
#
# Distributed under the MIT License (license terms are at https://github.com/DKFZ-ODCF/RNAseqWorkflow).
#
#######################################################################################################################
# AUTHOR: Naveed Ishaque
# DATE: 25th Nov 2016
# EMAIL: naveed.ishaque@gmail.com

# Takes Kallisto abundance file and ignore list GTF file
# Rescales TPM without ignore genes

#######################################################################################################################

## 0 : LOAD LIBRARIES

use strict;
use List::Util 'sum';

my $usage = "\n\tUSAGE: $0 [kallisto abundance.tsv file] [ignore GTF file]\n\n";

#######################################################################################################################

## 1 : READ IN FEATURE_COUNT FILES OR DIE

warn "STARTING PROCESS : 1 : parsing inputs\n";

my $kallisto_file = shift or die "-------- PROCESS : 1 : parsing inputs : ERROR : missing Kallisto abundance.tsv file!\n$usage";
my $ignore_gtf_file = shift or die "-------- PROCESS : 1 : parsing inputs : ERROR : missing ignore GTF file!\n$usage";

warn "PROCESS COMPLETE : 1 : parsing inputs\n";

#######################################################################################################################

## 2 : FILE CHECK OR DIE

warn "STARTING PROCESS : 2 : file checks\n";

open (my $kallisto_fh, "<$kallisto_file") or die "-------- PROCESS : 2 : file checks : ERROR : cannot open first featureCounts file \"$kallisto_file\"\n$usage";
open (my $ignore_gtf_fh, "<$ignore_gtf_file") or die "-------- PROCESS : 2 : file checks : ERROR : cannot open ignore GTF file file \"$ignore_gtf_file\"\n$usage";

warn "PROCESS COMPLETE : 2 : file checks\n";

#######################################################################################################################

## 4 : PARSE IGNORE

my %ignore = ();
my $ignore_count = 0;

if (length $ignore_gtf_file > 0) {
  warn "STARTING PROCESS : 4 : parse ignore GTF file\n";
  while (my $line = <$ignore_gtf_fh>){
    chomp $line;
    my @line_split = split ("\t", $line);
    if ($line_split[2] eq "gene") {
      my @comment = split ("\"",$line_split[8]);
      $ignore{$comment[1]}="$line_split[0]\t$line_split[3]\t$line_split[4]\t$comment[1]\t.\t$line_split[6]\t$comment[9]\n";
      $ignore_count++ ;
    }
  }
  warn "-------- PROCESS : 3 : parse ignore GTF file : $ignore_gtf_file : gene counts : $ignore_count\n";
  close($ignore_gtf_fh);
  warn "PROCESS COMPLETE : 4 : parse ignore GTF file\n";

}

#######################################################################################################################

## 5 : READ FILES INTO HASH

warn "STARTING PROCESS : 5 : reading files\n";

# each file has the structure: ENSG_ID chrs start_pos end_pos strand exonic_length exonic_counts

my $hash_index = 0;
my %tpm_counts_all = ();
my %tpm_counts = ();
my $counter;

foreach my $fc_fh ($kallisto_fh){
  $counter = 0;

  warn "-------- PROCESS : 5 : reading files : $kallisto_file\n";

  my $line = <$fc_fh>;
  $line = <$fc_fh>;
  while ($line = <$fc_fh>){
    chomp ($line);
    my ($id,$length,$eff_length,$est_counts,$tpm)=split /\t/, $line;   
    $tpm_counts{$id}=$tpm unless exists($ignore{$id});
    $tpm_counts_all{$id}=$tpm;
    $counter++;
  }

  warn "-------- PROCESS : 5 : reading files : $kallisto_file : gene count : $counter\n";
  $hash_index++;
}

close ($kallisto_fh);

warn "PROCESS COMPLETE : 5 : reading files\n";

#######################################################################################################################

## 6 : CALCULATE TPM DIVISOR

warn "STARTING PROCESS : 6 : calculating total TPMs\n";

my $tpm_sum_all = sum values %tpm_counts_all;
my $tpm_sum = sum values %tpm_counts;
my $tpm_scaler = $tpm_sum_all/$tpm_sum;

warn "-------- PROCESS : 6 : calculating total TPMs : $kallisto_file : total TPMs : all : $tpm_sum_all\n";
warn "-------- PROCESS : 6 : calculating total TPMs : $kallisto_file : total TPMs : ignore : $tpm_sum\n";
warn "-------- PROCESS : 6 : calculating total TPMs : $kallisto_file : scaling factor : all/ignore : $tpm_scaler\n";

warn "PROCESS COMPLETE : 6 : calculating total reads TPMs\n";

#######################################################################################################################

## 7 : PRINT

warn "STARTING PROCESS : 7 : printing\n";

# open an original file to maintain order

open (my $fh, "<$kallisto_file") or die;

# print header
my $header = <$fh>;
print $header;

#print body, with rescaled TPM
while (my $line = <$fh>){
  chomp $line;
  my ($id,$length,$eff_length,$est_counts,$tpm) = split /\t/, $line;
  print "$id\t$length\t$eff_length\t$est_counts\t";
  print "".$tpm*$tpm_scaler."";
  print "\n";
}

close ($fh);

warn "PROCESS COMPLETE : 7 : printing\n";

#######################################################################################################################

warn "DONE!\n";

exit(0);



